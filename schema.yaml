# This uses JSON schema, but stores it as YAML for ease of readability.

$schema: https://json-schema.org/draft/2020-12/schema
$id: https://schemas.dinwoodie.org/asm.json

title: Asmodeus task list
description: ''  # TODO

$comment: >-
  Canonical form for the root object is an object, but it's acceptable for
  input to be a task or list of tasks.

anyOf:
  - type: object
    properties:
      defaults:
        type: object
        properties:
          baseUrgency:
            description: The starting urgency for any task.
            type: number
            default: 0
          ageUrgencyFactor:
            description: The amount the urgency increases each day.
            type: number
            default: 1
          ageUrgencyMax:
            description: >-
              The maximum amount the urgency can be increased by due to age.
            type: [number, 'null']
            default: null
      tasks:
        $comment: The canonical form is a list of tasks.
        type: array
        items:
          allOf:
            - $ref: '#/$defs/task'
            - anyOf:
                - $ref: '#/$defs/stateChecker/doneOrDropped'
                - $ref: '#/$defs/stateChecker/todo'
                - $ref: '#/$defs/stateChecker/placeholder'
    required: [tasks]

$defs:

  python:
    $comment: >
      These represent native Python objects, normally using the initialization
      parameters.  Where there is a standard non-Python-object way of
      representing objects used in properties, that is also provided as an
      alternative way to represent an object.  For example, specifying the
      start date of a dateutil.rrule object can be done with a
      $defs/python/datetime/datetime object, or with a $defs/datetime object.

      These are structured according to the import and object path.

    datetime:

      timedelta:
        type: object
        properties:
          weeks: {type: integer}
          days: {type: integer}
          hours: {type: integer}
          minutes: {type: integer}
          seconds: {type: integer}
          milliseconds: {type: integer}
          microseconds: {type: integer}
        additionalProperties: false

      _dateDatetimeCommon:
        $comment: >-
          This object defines the common required fields for both datetime.date
          and datetime.datetime objects to avoid repetition.  We can't just do
          this in datetime.date then reference that from datetime.datetime, as
          both datetime.date and datetime.datetime want to set
          unevaluatedProperties to false.
        type: object
        properties:
          year:
            type: integer
            minimum: 1
            maximum: 9999
          month:
            type: integer
            minimum: 1
            maximum: 12
          day:
            $comment: >-
              We could put in some fancier validation here, to ensure that the
              day is valid for the given month and year, but that seems like
              vast overkill.
            type: integer
            minimum: 1
            maximum: 31
        required: [year, month, day]

      date:
        $ref: '#/$defs/python/datetime/_dateDatetimeCommon'
        unevaluatedProperties: false

      datetime:
        $ref: '#/$defs/python/datetime/_dateDatetimeCommon'
        properties:
          hour:
            type: integer
            minimum: 0
            maximum: 23
          minute:
            type: integer
            minimum: 0
            maximum: 59
          second:
            type: integer
            minimum: 0
            maximum: 0
          microsecond:
            type: integer
            minimum: 0
            maximum: 999999
          tzinfo:
            $comment: >-
              This is a stricter definition than the one that the datetime
              module uses, since this only allows fixed offsets but the Python
              module allows timezones like Europe/London that have variable
              offsets over the course of the year.  Implementing the datetime
              module's version seems unnecessary.
            $ref: '#/$defs/python/datetime/timezone'
          fold:
            enum: [0, 1]
        unevaluatedProperties: false

      timezone:
        type: object
        properties:
          offset:
            $ref: '#/$defs/python/datetime/timedelta'
          name: {type: string}
        required: [offset]
        additionalProperties: false

    dateutil:

      relativedelta:

        relativedelta:
          type: object
          anyOf:
            - properties:
                years:
                  type: integer
                  minimum: -9999
                  maximum: 9999
                months:
                  type: integer
                  minimum: -12
                  maximum: 12
                days: {type: integer}
                leapdays: {type: integer}
                weeks: {type: integer}
                hours: {type: integer}
                minutes: {type: integer}
                seconds: {type: integer}
                microseconds: {type: integer}
                year:
                  type: integer
                  minimum: 1
                  maximum: 9999
                month:
                  type: integer
                  minimum: 1
                  maximum: 12
                day:
                  type: integer
                  minimum: 1
                  maximum: 31
                weekday:
                  anyOf:
                    - $ref: '#/$defs/python/dateutil/relativedelta/weekday'
                    - type: integer
                      minimum: 0
                      maximum: 6
                yearday: {type: integer}
                nlyearday: {type: integer}
                hour:
                  type: integer
                  minimum: 0
                  maximum: 23
                minute:
                  type: integer
                  minimum: 0
                  maximum: 59
                second:
                  type: integer
                  minimum: 0
                  maximum: 59
                microsecond:
                  type: integer
                  minimum: 0
                  maximum: 999999
              additionalProperties: false

            - properties:
                dt1:
                  $ref: '#/$defs/dateOrDatetime'
                dt2:
                  $ref: '#/$defs/dateOrDatetime'
              required: [dt1, dt2]
              additionalProperties: false

        weekday:
          # TODO: Add an alternative way of structuring this that doesn't rely
          # on string parsing.
          $comment: Store as a string like that which Python's repr produces.
          type: string
          pattern: ^(MO|TU|WE|TH|FR|SA|SU)(\([+-]?[1-9][0-9]*\))?$

      rrule:
        rrule:
          type: object
          properties:
            freq:  # TODO add flexibility re case?
              enum: [YEARLY, MONTHLY, WEEKLY, DAILY, HOURLY, MINUTELY, SECONDLY]
            dtstart:
              $ref: '#/$defs/dateOrDatetime'
            wkst:
              anyOf:
                - $comment: Not strictly the same, but close enough.
                  $ref: '#/$defs/python/dateutil/relativedelta/weekday'
                - type: integer
                  minimum: 0
                  maximum: 6
            count:
              type: integer
              minimum: 1
            until:
              $ref: '#/$defs/dateOrDatetime'
            bysetpos:
              anyOf:
                - allOf:
                    - not:
                        const: 0
                    - type: integer
                      minimum: -366
                      maximum: 366

                - type: array
                  items:
                    $ref: '#/$defs/python/dateutil/rrule/rrule/properties/bysetpos/anyOf/0'
            bymonth:  # TODO: Allow specifying as a string?
              anyOf:
                - type: integer
                  minimum: 1
                  maximum: 12
                - type: array
                  items:
                    $ref: '#/$defs/python/dateutil/rrule/rrule/properties/bymonth/anyOf/0'
            bymonthday:
              anyOf:
                - allOf:
                    - not: {const: 0}
                    - type: integer
                      minimum: -31
                      maximum: 31
                - type: array
                  items:
                    $ref: '#/$defs/python/dateutil/rrule/rrule/properties/bymonth/anyOf/0'
            byyearday:
              anyOf:
                - allOf:
                    - not: {const: 0}
                    - type: integer
                      minimum: -366
                      maximum: 366
                - type: array
                  items:
                    $ref: '#/$defs/python/dateutil/rrule/rrule/properties/byyearday/anyOf/0'
            byeaster:
              # TODO Raise a bug report with the dateutil folks; trying to work
              # out the valid range of values here found more problems than I'd
              # expect!  In particular, I'd expect values that take the
              # calculation out of the year of the Easter in question seem to
              # be broken:
              #
              # >>> next(iter(rrule(freq=YEARLY, dtstart=date(2024,1,1), byeaster=275)))
              # datetime.datetime(2024, 12, 31, 0, 0)
              #
              # >>> next(iter(rrule(freq=YEARLY, dtstart=date(2024,1,1), byeaster=276)))
              # Traceback (most recent call last):
              #   File "<stdin>", line 1, in <module>
              #   File "/usr/lib/python3/dist-packages/dateutil/rrule.py", line 907, in _iter
              #     ii.rebuild(year, month)
              #   File "/usr/lib/python3/dist-packages/dateutil/rrule.py", line 1248, in rebuild
              #     self.eastermask[eyday+offset] = 1
              #     ~~~~~~~~~~~~~~~^^^^^^^^^^^^^^
              #   IndexError: list assignment index out of range
              anyOf:
                - type: integer
                - type: array
                  items:
                    type: integer
            byweekno:
              anyOf:
                - allOf:
                    - not: {const: 0}
                    - type: integer
                      minimum: -53
                      maximum: 53
                - type: array
                  items:
                    $ref: '#/$defs/python/dateutil/rrule/rrule/properties/byweekno/anyOf/0'
            byweekday:
              anyOf:
                - anyOf:  # Nesting allows reference to this definition of the singleton.
                    - $comment: Not strictly the same, but close enough.
                      $ref: '#/$defs/python/dateutil/relativedelta/weekday'
                    - type: integer
                      minimum: 0
                      maximum: 6
                - type: array
                  items:
                    $ref: '#/$defs/python/dateutil/rrule/rrule/properties/byweekday/anyOf/0'
            byhour:
              anyOf:
                - type: integer
                  minimum: 0
                  maximum: 23
                - type: array
                  items:
                    $ref: '#/$defs/python/dateutil/rrule/rrule/properties/byhour/anyOf/0'
            byminute:
              anyOf:
                - type: integer
                  minimum: 0
                  maximum: 59
                - type: array
                  items:
                    $ref: '#/$defs/python/dateutil/rrule/rrule/properties/byminute/anyOf/0'
            bysecond:
              anyOf:
                - type: integer
                  minimum: 0
                  maximm: 59
                - type: array
                  items:
                    $ref: '#/$defs/python/dateutil/rrule/rrule/properties/bysecond/anyOf/0'

          allOf:
            - $comment: If count is specified, until can't be.
              if:
                required: [count]
              then:
                properties:
                  until: false
            - $comment: If until is specified, count can't be.
              if:
                required: [until]
              then:
                properties:
                  count: false

          required: [freq]
          additionalProperties: false

        rruleset:
          type: object
          $comment: >-
            This is really a recipe for producing a particular Python object,
            rather than one that can be initialised directly.
          properties:  # TODO: check if these work with dates as well as datetimes
            exdate:
              anyOf:
                - $ref: '#/$defs/datetime'
                - type: array
                  items:
                    $ref: '#/$defs/datetime'
            exrule:
              anyOf:
                - $ref: '#/$defs/recurringDatetime'
                - type: array
                  items:
                    $ref: '#/$defs/recurringDatetime'
            rdate:
              anyOf:
                - $ref: '#/$defs/datetime'
                - type: array
                  items:
                    $ref: '#/$defs/datetime'
            rrule:
              anyOf:
                - $ref: '#/$defs/recurringDatetime'
                - type: array
                  items:
                    $ref: '#/$defs/recurringDatetime'

          additionalProperties: false

        rrulestr:
          $comment: No validation is done of this string as part of the schema.
          anyOf:
            - type: string
            - type: object
              properties:
                s: {type: string}
                dtstart:
                  $ref: '#/$defs/datetime'
                unfold: {type: bool}
                ignoretz: {type: bool}
                tzids: true  # TODO
                tzinfos: true  # TODO
              required: [s]
              additionalProperties: false

  date:
    anyOf:
      - type: string
        format: date
      - $ref: '#/$defs/python/datetime/date'

  datetime:
    $comment: >-
      If the Python object form is used, naive objects should be assumed to be
      in the local timezone.
    anyOf:
      - type: string
        format: date-time
      - $ref: '#/$defs/python/datetime.datetime'

  dateOrDatetime:
    anyOf:
      - $ref: '#/$defs/date'
      - $ref: '#/$defs/datetime'

  duration:
    anyOf:
      - type: string
        format: duration
      - $ref: '#/$defs/python/datetime/timedelta'
      - $ref: '#/$defs/python/dateutil/relativedelta/relativedelta'

  durationWholeDays:
    $ref: '#/$defs/duration'
    # It's either a string or a Python object.  If it's a string, use a regular
    # expression to check it only contains whole days (it's safe to assume the
    # string is a valid duration in general).  If it's a Python object check it
    # doesn't have any properties that might change non-whole-day values.
    anyOf:
      - type: string
        pattern: ^P[0-9DWMY]*$
      - type: object
        properties:
          hours: {const: 0}
          minutes: {const: 0}
          seconds: {const: 0}
          microseconds: {const: 0}
          hour: false
          minute: false
          second: false
          microsecond: false

  recurringDatetime:
    anyOf:
      - $ref: '#/$defs/python/dateutil/rrule/rrule'
      - $ref: '#/$defs/python/dateutil/rrule/rruleset'
      - $ref: '#/$defs/python/dateutil/rrule/rrulestr'
      - type: object
        properties:
          first:
            $ref: '#/$defs/datetime'
          recurEvery:
            $ref: '#/$defs/duration'
        required: [first, recurEvery]
        additionalProperties: false

  recurringDate:
    $comment: >-
      The rrulestr format is forbidden for now, as I don't know how to validate
      that it doesn't include times.
    anyOf:
      - $ref: '#/$defs/python/dateutil/rrule/rrule'
        properties:
          freq:
            enum: [YEARLY, MONTHLY, WEEKLY, DAILY]
          dtstart:
            $ref: '#/$defs/date'
          byhour: {const: 0}
          byminute: {const: 0}
          bysecond: {const: 0}
        anyOf:
          - required: [dtstart]
          - required: [byhour, byminute, bysecond]
      - $ref: '#/$defs/python/dateutil/rrule/rruleset'
        properties:
          exdate:
            anyOf:
              - $ref: '#/$defs/date'
              - type: array
                items:
                  $ref: '#/$defs/date'
          exrule:
            anyOf:
              - $ref: '#/$defs/recurringDate'
              - type: array
                items:
                  $ref: '#/$defs/recurringDate'
          rdate:
            anyOf:
              - $ref: '#/$defs/date'
              - type: array
                items:
                  $ref: '#/$defs/date'
          rrule:
            anyOf:
              - $ref: '#/$defs/recurringDate'
              - $type: array
                items:
                  $ref: '#/$defs/recurringDate'
      - type: object
        properties:
          first:
            $ref: '#/$defs/date'
          recurEvery:
            $ref: '#/$defs/durationWholeDays'
        required: [first, recurEvery]
        additionalProperties: false

  period:
    # By vague reference to "Periods" in RFC 3339 Appendix A.  A period is
    # specified by exactly two of its start, end and duration.
    type: object
    properties:
      start:
        $ref: '#/$defs/dateOrDatetime'
      end:
        $ref: '#/$defs/dateOrDatetime'
      duration:
        $ref: '#/$defs/duration'
    additionalProperties: false
    minProperties: 2
    maxProperties: 2

  periodWholeDays:
    $comment: >
      A period includes the start and/or end date; durations are inclusive of
      the start or end date.  Thus the following are all equivalent and include
      both the 1st and 2nd of January 2020:

        {"start": "2020-01-01", "end": "2020-01-02"}

        {"start": "2020-01-02", "duration": "P2D"}

        {"duration": "P2D", "end": "2020-01-02"}
    type: object
    properties:
      start:
        $ref: '#/$defs/date'
      end:
        $ref: '#/$defs/date'
      duration:
        $ref: '#/$defs/durationWholeDays'
    additionalProperties: false
    minProperties: 2
    maxProperties: 2

  recurringPeriod:
    type: object
    properties:
      start:
        $ref: '#/$defs/recurringDatetime'
      duration:
        $ref: '#/$defs/duration'
    required: [start, duration]
    additionalProperties: false

  recurringWholeDayPeriod:
    type: object
    properties:
      start:
        $ref: '#/$defs/recurringDate'
      duration:
        $ref: '#/$defs/durationWholeDays'
    required: [start, duration]
    additionalProperties: false

  task:
    type: object
    properties:

      title:
        type: string

      uuid:
        $comment: Populate this if it's not set already.
        type: string
        format: uuid

      state:
        $comment: >
          If unspecified, assume "todo" unless there is a descendent task
          that's set to "placeholder", in which case assume "placeholder".

          Populate as "placeholder" if it's not already set, remove explicit
          "todo" if it is set.

        enum: [placeholder, todo, done, dropped]

      created:
        $comment: >-
          Set if it's unset according to our best guess; probably the file's
          last modification time or the current time.
        $ref: '#/$defs/datetime'

      ended:
        $comment: >-
          Set if it's unset and the task is done or dropped according to our
          best guess; probably the file's last modification time or the current
          time.  Remove if the task is a placeholder or a todo.
        $ref: '#/$defs/datetime'

      wait:
        description: >-
          The inverse of "due": when should the task not be started before?
        $comment: >
          If this is a date, take it to mean the start of the day.

          This value is inherited by child tasks that don't have it set
          explicitly.  Child tasks that do set it explicitly must have it set
          to a time that is no earlier than that on the parent task.
        $ref: '#/$defs/dateOrDatetime'

      due:
        $comment: >
          If this is a date, take it to mean the end of the day.

          This value is inherited by child tasks that don't have it set
          explicitly.  Child tasks that do set it explicitly must have it set
          to a time that is no later than that on the parent task.
        $ref: '#/$defs/dateOrDatetime'

      repetitionTemplate:
        type: string
        format: uuid

      children:
        type: array
        items:
          $ref: '#/$defs/task'

      completeChildrenInSequence:
        description: Whether child tasks must be completed in order.
        $comment: >-
          This value is inherited by child tasks.  If unspecified, it defaults
          to false.
        type: boolean

      requires:
        description: >-
          Tasks that must be completed before this task can be completed.
        $comment: >
          Remove duplicates.

          This value is inherited by child tasks.  Child tasks that have it set
          explicitly have the explicit values in addition to values from the
          parent tasks.  If a child has a task here that is also on a parent
          task, it can be removed from the child.
        type: array
        items:
          type: string
          format: uuid

      blocks:
        description: >
          Tasks that cannot be completed before this task is completed.
        $comment: >-
          Remove this element if it appears, and populate the corresponding
          "requires" properties instead.  That means inheritence isn't
          relevant.
        type: array
        items:
          type: string
          format: uuid

      notes: {type: string}

      contexts:
        description: The context or contexts in which this task can be completed.
        $comment: Remove duplicates.
        type: array
        items:
          type: string

      times:
        description: Times the task is available.
        $comment: >-
          If this isn't set, assume the task is always available.  If this is
          the empty list, assume it's never available.
        type: array
        items:
          $ref: '#/$defs/timeperiodSequence'

      baseUrgency:
        description: The starting urgency score for the task.
        $comment: This value is inherited by child tasks.
        type: number

      ageUrgencyFactor:
        description: The amount the urgency increases each day.
        $comment: This value is inherited by child tasks.
        type: number

      ageUrgencyMax:
        description: >-
          The maximum amount the urgency can be increased by due to task age.
        $comment: This value is inherited by child tasks.
        type: [number, 'null']

      urgency:
        $comment: >-
          The application can populate this so the user can see the calculated
          urgency.
        type: number
        readOnly: true

    additionalProperties: false

  _repeatingTaskCommon:
    description: >
      A single repeating task.  Looks a lot like a regular task, except some
      values aren't relevant and others are durations to set the actual
      datetime relative to some anchor point.

      Except where noted, details are the same as for a regular task.
    type: object
    properties:

      title: {type: string}

      uuid:
        $comment: Populate this if it's not set already.
        type: string
        format: uuid

      parent:
        # TODO Work out more implementation details.
        $comment: The task that this task should appear under.
        type: string
        format: uuid

      wait:
        anyOf:
          - $ref: '#/$defs/duration'
          - $ref: '#/$defs/durationWholeDays'

      due:
        anyOf:
          - $ref: '#/$defs/duration'
          - $ref: '#/$defs/durationWholeDays'

      children:
        type: array
        items:
          $ref: '#/$defs/repeatingTaskChild'

      completeChildrenInSequence:
        $ref: '#/$defs/task/properties/completeChildrenInSequence'

      requires:
        # TODO Document restrictions here: I think the UUIDs here can be either
        # (a) repeating tasks within the same set of repeating tasks, at which
        # point they get converted to instance UUIDs at the point the tasks are
        # created, or (b) task UUIDs, which remain constant.
        $ref: '#/$defs/task/properties/requires'

      blocks:
        # TODO Document restrictions here: I think the UUIDs here can be either
        # (a) repeating tasks within the same set of repeating tasks, at which
        # point they get converted to instance UUIDs at the point the tasks are
        # created, or (b) task UUIDs, which remain constant.
        $ref: '#/$defs/task/properties/blocks'

      notes:
        $ref: '#/$defs/task/properties/notes'

      contexts:
        $ref: '#/$defs/task/properties/contexts'

      times:
        $ref: '#/$defs/task/properties/times'

      baseUrgency:
        $ref: '#/$defs/task/properties/baseUrgency'

      ageUrgencyFactor:
        $ref: '#/$defs/task/properties/ageUrgencyFactor'

      ageUrgencyMax:
        $ref: '#/$defs/task/properties/ageUrgencyMax'

    additionalProperties: false

  repeatingTaskRoot:
    $ref: '#/$defs/_repeatingTaskCommon'
    required: [parent]

  repeatingTaskChild:
    $ref: '#/$defs/_repeatingTaskCommon'
    properties: {parent: false}

  repetitionTemplate:
    $comment: >-
      If this is a task that occurs on a regular schedule (e.g. pay the rent
      every month), use the schedule property.  If this is a task that wants to
      be completed some time after the last completion (e.g. clean the shower),
      use the repeatAfter property.
    properties:
      uuid:
        $comment: Populate this if it's not set already.
        type: string
        format: uuid
      taskRoots:
        type: array
        items:
          $ref: '#/$defs/repeatingTaskRoot'
      schedule:
        anyOf:
          - $ref: '#/$defs/recurringDatetime'
          - $ref: '#/$defs/recurringDate'
      repeatAfter:
        $ref: '#/$defs/duration'
    required: [uuid, taskRoots]
    anyOf:
      - required: [schedule]
      - required: [repeatAfter]
    additionalProperties: false

  stateChecker:
    $comment: >-
      This exists to perform recursive validation of the state of tasks,
      ensuring that placeholder tasks only occur as children of other
      placeholder tasks, and todo tasks never occur as children of done or
      dropped tasks.

    placeholder:
      $comment: >-
        Placeholders must have a list of children (although it can be an empty
        list), the state is not required to be explicit, and the children can
        be any type of task.
      properties:
        state: {const: placeholder}
        children:
          items:
            anyOf:
              - $ref: '#/$defs/stateChecker/doneOrDropped'
              - $ref: '#/$defs/stateChecker/todo'
              - $ref: '#/$defs/stateChecker/placeholder'
      required: [children]

    todo:
      $comment: >-
        Todos cannot have placeholders as children, only other todos, done or
        dropped tasks.  The todo state is not required to be explicit.
      properties:
        state: {const: todo}
        children:
          items:
            anyOf:
              - $ref: '#/$defs/stateChecker/todo'
              - $ref: '#/$defs/stateChecker/doneOrDropped'

    doneOrDropped:
      $comment: >-
        Done or dropped tasks must only have other done or dropped tasks as
        children; users must either complete or drop child tasks before they
        can complete or drop the parent task.  The state must be explicit.
      properties:
        state:
          enum: [done, dropped]
        children:
          items:
            $ref: '#/$defs/doneOrDropped'
      required: [state]
